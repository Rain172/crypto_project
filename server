# server.py
import socket
import threading
import sqlite3

# Initialize or connect to the SQLite database
conn = sqlite3.connect('coin_system.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users (username TEXT PRIMARY KEY, balance REAL)''')
conn.commit()

def handle_client(client_socket):
    username = client_socket.recv(1024).decode('utf-8')
    
    while True:
        try:
            request = client_socket.recv(1024).decode('utf-8')
            if not request:
                break

            # Process the request
            parts = request.split()
            if parts[0] == 'SEND':
                if len(parts) == 3:
                    receiver = parts[1]
                    amount = float(parts[2])

                    # Check if sender and receiver exist
                    c.execute('SELECT balance FROM users WHERE username=?', (username,))
                    sender_balance = c.fetchone()
                    c.execute('SELECT balance FROM users WHERE username=?', (receiver,))
                    receiver_balance = c.fetchone()

                    if sender_balance and receiver_balance:
                        if sender_balance[0] >= amount:
                            # Update balances
                            c.execute('UPDATE users SET balance=balance-? WHERE username=?', (amount, username))
                            c.execute('UPDATE users SET balance=balance+? WHERE username=?', (amount, receiver))
                            conn.commit()
                            response = f"Sent {amount} coins to {receiver}"
                        else:
                            response = "Insufficient balance"
                    else:
                        response = "Sender or receiver does not exist."
                else:
                    response = "Invalid SEND command format. Use: SEND [receiver] [amount]"
            elif parts[0] == 'BALANCE':
                c.execute('SELECT balance FROM users WHERE username=?', (username,))
                user_balance = c.fetchone()
                if user_balance:
                    response = f"Your balance: {user_balance[0]} coins"
                else:
                    response = "You don't have an account."
            elif parts[0] == 'EXIT':
                response = "Goodbye!"
                break
            else:
                response = "Invalid command"

            client_socket.send(response.encode('utf-8'))

        except Exception as e:
            print(f"Error: {e}")
            break

    client_socket.close()

def main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', 8080))
    server.listen(5)
    print("[INFO] Server listening on port 8080")

    while True:
        try:
            client_socket, addr = server.accept()
            print(f"[INFO] Accepted connection from {addr[0]}:{addr[1]}")

            # Start a new thread to handle the client
            client_handler = threading.Thread(target=handle_client, args=(client_socket,))
            client_handler.start()

        except KeyboardInterrupt:
            print("Server terminated by user.")
            break

if __name__ == '__main__':
    main()
